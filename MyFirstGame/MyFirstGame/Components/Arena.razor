<h3 class="align-content-center text-center">Arena</h3>
<div class="container">
    <div class="row">
        <div class="col-9" tabindex="0" @onkeydown="(KeyboardEventArgs e) => { OnKeyDown.InvokeAsync(e); StateHasChanged(); }" id="@ID">
            <table style="width:100%;">
                @for (int l = 0; l < Lines; l++)
                {
                    <tr>
                        @for (int c = 0; c < Columns; c++)
                        {
                            var color = GArena.SlotColor(GArena.Slots[l, c]);
                            <td width="@w_cel" height="@h_cel" style="background-color: rgba(@color.R, @color.G, @color.B, @color.A) "></td>
                        }
                    </tr>
                }
            </table>
        </div>
        <div class="col-2">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Player</th>
                        <th scope="col">Score</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < GArena.Users.Count; i++)
                    {
                        var current = GArena.Users.OrderByDescending(q => q.Score).ThenBy(q => q.Name).ElementAt(i);
                        <tr>
                            <td style="background-color: rgba(@current.Color.R, @current.Color.G, @current.Color.B, 0.75)">@current.Name</td>
                            <td style="background-color: rgba(@current.Color.R, @current.Color.G, @current.Color.B, 0.75)">@current.Score</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@code {
    #region Screen proprieties
    private int w_table { get => 600; }
    private int h_table { get => 400; }
    private int w_cel { get => w_table / Columns; }
    private int h_cel { get => h_table / Lines; }
    #endregion

    [Parameter] public int Lines { get; set; } = 5;
    [Parameter] public int Columns { get; set; } = 5;
    [Parameter] public string ID { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    public Data.Arena<Data.User> GArena { get; set; }

    protected override void OnInitialized()
    {
        GArena = new Data.Arena<Data.User>(Lines, Columns);

        base.OnInitialized();
    }
}
